interviews <- read_csv(here("data", "SAFI_clean.csv"), na = "NULL")
interviews <- read_csv(interviews, na = "NULL")
select(interviews, village, no_membrs, months_lack_food)
view(interviews)
interviews[c(village, no_membr, months_lack_food)]
interviews[c("village", "no_membr", "months_lack_food")]
interviews[c("village", "no_membrs", "months_lack_food")]
## yields same results
view(interviews)
## yields same results
select(interviews, "village":"months_lack_food")
## yields same results
select(interviews, "village":"resondent_wall_type")
## yields same results
select(interviews, "village":"respondent_wall_type")
# filter rows in dyplr
filter(interviews, village == "chirodzo")
# filter rows in dyplr
filter(interviews, village == "Chirodzo")
# filter with AND/OR conditions
filter(interviews, "village" == "Chirodzo", rooms > 1, no_meals > 2)
# filter rows in dyplr
filter(interviews, village == "Chirodzo")
# filter with AND/OR conditions
filter(interviews, "village" == "Chirodzo", rooms > 1, no_meals > 2)
# filter with AND/OR conditions
filter(interviews, "village" == "Chirodzo", rooms > 1, no_meals > 2)
# filter rows in dyplr
filter(interviews, village == "Chirodzo")
# filter with AND/OR conditions
filter(interviews, "village" == "Chirodzo", rooms > 1, no_meals > 2)
# filter with AND/OR conditions
filter(interviews, village == "Chirodzo", rooms > 1, no_meals > 2)
library(readr)
SAFI_clean <- read_csv("dPrep/data/SAFI_clean.csv")
View(SAFI_clean)
View(interviews)
source("~/.active-rstudio-document", echo=TRUE)
interviews <- read_csv(SAFI_clean)
library(readr)
listings <- read_csv("Tilburg Uni/dPrep(R)/01_Project/listings.csv")
View(listings)
# in the listng data, i want to create a new subdata with all the listings that has all the minmun nights of <2 nights
filter(listings, minimum_nights < 2)
# now I want to view the first 6 rows of the subdata
head(subdata)
source("~/.active-rstudio-document", echo=TRUE)
a
# in the listng data, i want to create a new subdata with all the listings that has all the minmun nights of <2 nights
filter(listings, minimum_nights < 2)
listing <- read.csv("listings.csv")
# in the listng data, i want to create a new subdata with all the listings that has all the minmun nights of <2 nights
filter(listings, minimum_nights < 2)
# assign variable list to the listings.csv file
listings <- read.csv("listings.csv")
library(readr)
listings <- read_csv("Tilburg Uni/dPrep(R)/01_Project/listings.csv")
View(listings)
# assign variable list to the listings.csv file
listings <- read.csv("listings.csv")
filter(listings, minimum_nights < 2)
# q: how do I view the listings data
# a: by typing the name of the variable that the data is assigned to
listings
library(readr)
listings <- read_csv("Tilburg Uni/dPrep(R)/01_Project/listings.csv")
View(listings)
source("~/Github/team-project-dprep_group_8/src/data-preparation/data-preparation.R", echo=TRUE)
# create a list of city datasets
city_datasets <- list(Amsterdam = combined_ams, Tokyo = combined_tyo, London = combined_ldn)
# Initialize an empty dataframe to store results
pricing_results <- data.frame()
# Loop through each city dataset
for (city_name in names(city_datasets)) {
# Get the city dataset
city_data <- city_datasets[[city_name]]
# Summarize pricing by stay_length
pricing_summary <- city_data %>%
group_by(stay_type) %>%
summarize(mean_price = mean(price, na.rm = TRUE),
median_price = median(price, na.rm = TRUE),
min_price = min(price, na.rm = TRUE),
max_price = max(price, na.rm = TRUE))
# Add city name to the summary
pricing_summary$city <- city_name
# Append the summary to the results dataframe
pricing_results <- bind_rows(pricing_results, pricing_summary)
}
# Print the combined results
print(pricing_results)
# Perform Linear Regression for each city
lr_results <- list()
# Loop through each city dataset
for (city_name in names(city_datasets)) {
# Get the city dataset
city_data <- city_datasets[[city_name]]
# Perform Linear Regression with price as IV and stay_type as DV with moderators room_type and review_scores_rating
lr_result <- lm(price ~ stay_type_dummy * room_type * review_scores_rating, data = city_data)
# Store Linear Regression results in the list
lr_results[[city_name]] <- tidy(lr_result)
}
# Print Linear Regression results for each city
for (city_name in names(lr_results)) {
cat("City:", city_name, "\n")
print(lr_results[[city_name]])
cat("\n")
}
#load libraries
library(readr)
library(data.table)
library(dplyr)
# create a list of city datasets
city_datasets <- list(Amsterdam = combined_ams, Tokyo = combined_tyo, London = combined_ldn)
# Initialize an empty dataframe to store results
pricing_results <- data.frame()
# Loop through each city dataset
for (city_name in names(city_datasets)) {
# Get the city dataset
city_data <- city_datasets[[city_name]]
# Summarize pricing by stay_length
pricing_summary <- city_data %>%
group_by(stay_type) %>%
summarize(mean_price = mean(price, na.rm = TRUE),
median_price = median(price, na.rm = TRUE),
min_price = min(price, na.rm = TRUE),
max_price = max(price, na.rm = TRUE))
# Add city name to the summary
pricing_summary$city <- city_name
# Append the summary to the results dataframe
pricing_results <- bind_rows(pricing_results, pricing_summary)
}
# Print the combined results
print(pricing_results)
# Perform Linear Regression for each city
lr_results <- list()
# Loop through each city dataset
for (city_name in names(city_datasets)) {
# Get the city dataset
city_data <- city_datasets[[city_name]]
# Perform Linear Regression with price as IV and stay_type as DV with moderators room_type and review_scores_rating
lr_result <- lm(price ~ stay_type_dummy * room_type * review_scores_rating, data = city_data)
# Store Linear Regression results in the list
lr_results[[city_name]] <- tidy(lr_result)
}
# Print Linear Regression results for each city
for (city_name in names(lr_results)) {
cat("City:", city_name, "\n")
print(lr_results[[city_name]])
cat("\n")
}
library(tidyr)
# create a list of city datasets
city_datasets <- list(Amsterdam = combined_ams, Tokyo = combined_tyo, London = combined_ldn)
# Initialize an empty dataframe to store results
pricing_results <- data.frame()
# Loop through each city dataset
for (city_name in names(city_datasets)) {
# Get the city dataset
city_data <- city_datasets[[city_name]]
# Summarize pricing by stay_length
pricing_summary <- city_data %>%
group_by(stay_type) %>%
summarize(mean_price = mean(price, na.rm = TRUE),
median_price = median(price, na.rm = TRUE),
min_price = min(price, na.rm = TRUE),
max_price = max(price, na.rm = TRUE))
# Add city name to the summary
pricing_summary$city <- city_name
# Append the summary to the results dataframe
pricing_results <- bind_rows(pricing_results, pricing_summary)
}
# Print the combined results
print(pricing_results)
# Perform Linear Regression for each city
lr_results <- list()
# Loop through each city dataset
for (city_name in names(city_datasets)) {
# Get the city dataset
city_data <- city_datasets[[city_name]]
# Perform Linear Regression with price as IV and stay_type as DV with moderators room_type and review_scores_rating
lr_result <- lm(price ~ stay_type_dummy * room_type * review_scores_rating, data = city_data)
# Store Linear Regression results in the list
lr_results[[city_name]] <- tidy(lr_result)
}
# Print Linear Regression results for each city
for (city_name in names(lr_results)) {
cat("City:", city_name, "\n")
print(lr_results[[city_name]])
cat("\n")
}
library(tidyverse)
# create a list of city datasets
city_datasets <- list(Amsterdam = combined_ams, Tokyo = combined_tyo, London = combined_ldn)
# Initialize an empty dataframe to store results
pricing_results <- data.frame()
# Loop through each city dataset
for (city_name in names(city_datasets)) {
# Get the city dataset
city_data <- city_datasets[[city_name]]
# Summarize pricing by stay_length
pricing_summary <- city_data %>%
group_by(stay_type) %>%
summarize(mean_price = mean(price, na.rm = TRUE),
median_price = median(price, na.rm = TRUE),
min_price = min(price, na.rm = TRUE),
max_price = max(price, na.rm = TRUE))
# Add city name to the summary
pricing_summary$city <- city_name
# Append the summary to the results dataframe
pricing_results <- bind_rows(pricing_results, pricing_summary)
}
# Print the combined results
print(pricing_results)
# Perform Linear Regression for each city
lr_results <- list()
# Loop through each city dataset
for (city_name in names(city_datasets)) {
# Get the city dataset
city_data <- city_datasets[[city_name]]
# Perform Linear Regression with price as IV and stay_type as DV with moderators room_type and review_scores_rating
lr_result <- lm(price ~ stay_type_dummy * room_type * review_scores_rating, data = city_data)
# Store Linear Regression results in the list
lr_results[[city_name]] <- tidy(lr_result)
}
# Print Linear Regression results for each city
for (city_name in names(lr_results)) {
cat("City:", city_name, "\n")
print(lr_results[[city_name]])
cat("\n")
}
source("~/Github/team-project-dprep_group_8/src/data-preparation/data-preparation.R", echo=TRUE)
source("~/Github/team-project-dprep_group_8/src/analysis/Analysis.R", echo=TRUE)
#load libraries
library(dplyr)
library(ggplot2)
library(readr)
# Load the raw city listings
Amsterdam_listings <- read_csv("../../data/Amsterdam_listings.csv.gz")
getwd()
setwd("~/Github/00_new_dprep_github/team-project-dprep_group_8/src/data-preparation")
# Load the raw city listings
Amsterdam_listings <- read_csv("../../data/Amsterdam_listings.csv.gz")
Tokyo_listings <- read_csv("../../data/Tokyo_listings.csv.gz")
London_listings <- read_csv("../../data/London_listings.csv.gz")
# Combine the DataFrames into a single DataFrame
combined_listings <- rbind(Amsterdam_listings, Tokyo_listings, London_listings)
# Add a "City" column for clarity
combined_listings$City <- c(rep("Amsterdam", nrow(Amsterdam_listings)),
rep("Tokyo", nrow(Tokyo_listings)),
rep("London", nrow(London_listings)))
###Listings_per_city###
# Count the number of listings per city
listings_per_city <- combined_listings %>%
group_by(City) %>%
summarize(num_listings = n())
# Create the bar chart
ggplot(listings_per_city, aes(x = reorder(City, num_listings), y = num_listings)) +
geom_bar(stat = "identity", fill= c("plum", "forestgreen", "deepskyblue4")) +
labs(x = "City", y = "Number of Listings",
title = "Airbnb Listings Distribution Across Cities") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = num_listings), vjust = -0.5, color = "black", size = 3)
# Save the plot as a PNG file
ggsave("../../output/airbnb_listings_distribution.png", width = 8, height = 6, dpi = 300)
###Stay_type###
# Create a new column for the stay length category
combined_listings$stay_category <- ifelse(combined_listings$minimum_nights < 7,
"short-stay", "long-stay")
# Create the histogram
ggplot(combined_listings, aes(x = stay_category, fill = City)) +
geom_bar(position = "dodge") +
labs(x = "Stay Category", y = "Number of Listings",
title = "Distribution of Short-Stay and Long-Stay Listings Across Cities") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("plum", "forestgreen", "deepskyblue4"))
# save the historgram as a PNG file
ggsave("../../output/stay_category_distribution.png", width = 8, height = 6, dpi = 300)
###Room_type###
# Get counts of room types per city
room_type_counts <- combined_listings %>%
group_by(City, room_type) %>%
summarize(count = n())
# Create a faceted bar chart
ggplot(room_type_counts, aes(x = room_type, y = count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Room Type", y = "Count",
title = "Count of Room Types in Each City") +
facet_wrap(~ City) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("plum", "forestgreen", "deepskyblue4"))
# save the plot as a PNG file
ggsave("../../output/room_type_distribution.png", width = 8, height = 6, dpi = 300)
#load libraries
library(ggplot2)
library(tidyverse)
library(readr)
library(data.table)
library(dplyr)
library(DescTools) # winsorize library
# List of city URLs
city_urls <- c(
"../../data/Amsterdam_listings.csv.gz",
"../../data/Tokyo_listings.csv.gz",
"../../data/London_listings.csv.gz"
)
#loop through each city dataset
process_city_data <- function(city_url) {
# Read data
city_listings <- read_csv(city_url)
# Adding the short stay and long stay apartment type variable
city_listings$stay_type <- ifelse(city_listings$minimum_nights < 7, "Short-stay", "Long-stay")
city_listings$stay_type_dummy <- ifelse(city_listings$stay_type == "Short-stay", 1, 0)
# Remove inconvenient symbols from the data
city_listings$price <- as.numeric(gsub("[^0-9.]", "", city_listings$price))
# Filter dataset for only the variables we need and remove listings without a price
filtered_dataset <- city_listings %>%
select(id, listing_url, neighbourhood, property_type, room_type, price, minimum_nights, stay_type, stay_type_dummy, number_of_reviews, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_communication, review_scores_location, review_scores_value) %>%
filter(!is.na(price)) %>%
filter(number_of_reviews > 0)
# Check for duplicates
sum(duplicated(filtered_dataset))
# Check the data for extreme outliers of price
Q1 <- quantile(filtered_dataset$price, 0.25, na.rm = TRUE)
Q3 <- quantile(filtered_dataset$price, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
upper_bound <- Q3 + 1.5 * IQR
lower_bound <- Q1 - 1.5 * IQR
outliers <- filtered_dataset$price[filtered_dataset$price > upper_bound | filtered_dataset$price < lower_bound]
percentage_outliers <- length(outliers) / length(filtered_dataset$price) * 100
##Winsorize price column with specified percentiles (function)
winsorize_price <- function(data, lower = 0.05, upper = 0.95) {
data$price <- with(data, pmin(pmax(price, quantile(price, lower)), quantile(price, upper)))
return(data)
}
# Winsorize prices by property type (0.05-0.95 percentiles)
filtered_by_pt <- split(filtered_dataset, filtered_dataset$property_type)
winsorized_prices <- lapply(filtered_by_pt, winsorize_price)
combined <- do.call(rbind, winsorized_prices)
# Return processed data with outliers deleted
return(list(filtered_dataset = filtered_dataset, outliers = outliers, percentage_outliers = percentage_outliers, combined = combined))
}
# Process data for each city
city_datasets <- lapply(city_urls, process_city_data)
# Access processed data for each city
names(city_datasets) <- c("Amsterdam", "Tokyo", "London")
amsterdam_data <- city_datasets$Amsterdam
tokyo_data <- city_datasets$Tokyo
london_data <- city_datasets$London
# Add loop to save each city's data
for (city_name in names(city_datasets)) {
filename <- paste0(city_name, "_aggregated_df.csv") # Construct filename
write_csv(city_datasets[[city_name]]$combined, file = filename)  # Write 'combined' data
}
# List of city URLs
city_urls <- c(
"../../data/Amsterdam_listings.csv.gz",
"../../data/Tokyo_listings.csv.gz",
"../../data/London_listings.csv.gz"
)
# Set output directory
output_directory <- "../../output"
if (!dir.exists(output_directory)) {
dir.create(output_directory)
}
#load libraries
library(ggplot2)
library(tidyverse)
library(readr)
library(data.table)
library(dplyr)
library(DescTools) # winsorize library
# List of city URLs
city_urls <- c(
"../../data/Amsterdam_listings.csv.gz",
"../../data/Tokyo_listings.csv.gz",
"../../data/London_listings.csv.gz"
)
# Set output directory
output_directory <- "../../output"
#loop through each city dataset
process_city_data <- function(city_url) {
# Read data
city_listings <- read_csv(city_url)
# Adding the short stay and long stay apartment type variable
city_listings$stay_type <- ifelse(city_listings$minimum_nights < 7, "Short-stay", "Long-stay")
city_listings$stay_type_dummy <- ifelse(city_listings$stay_type == "Short-stay", 1, 0)
# Remove inconvenient symbols from the data
city_listings$price <- as.numeric(gsub("[^0-9.]", "", city_listings$price))
# Filter dataset for only the variables we need and remove listings without a price
filtered_dataset <- city_listings %>%
select(id, listing_url, neighbourhood, property_type, room_type, price, minimum_nights, stay_type, stay_type_dummy, number_of_reviews, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_communication, review_scores_location, review_scores_value) %>%
filter(!is.na(price)) %>%
filter(number_of_reviews > 0)
# Check for duplicates
sum(duplicated(filtered_dataset))
# Check the data for extreme outliers of price
Q1 <- quantile(filtered_dataset$price, 0.25, na.rm = TRUE)
Q3 <- quantile(filtered_dataset$price, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
upper_bound <- Q3 + 1.5 * IQR
lower_bound <- Q1 - 1.5 * IQR
outliers <- filtered_dataset$price[filtered_dataset$price > upper_bound | filtered_dataset$price < lower_bound]
percentage_outliers <- length(outliers) / length(filtered_dataset$price) * 100
##Winsorize price column with specified percentiles (function)
winsorize_price <- function(data, lower = 0.05, upper = 0.95) {
data$price <- with(data, pmin(pmax(price, quantile(price, lower)), quantile(price, upper)))
return(data)
}
# Winsorize prices by property type (0.05-0.95 percentiles)
filtered_by_pt <- split(filtered_dataset, filtered_dataset$property_type)
winsorized_prices <- lapply(filtered_by_pt, winsorize_price)
combined <- do.call(rbind, winsorized_prices)
# Return processed data with outliers deleted
return(list(filtered_dataset = filtered_dataset, outliers = outliers, percentage_outliers = percentage_outliers, combined = combined))
}
# Process data for each city
city_datasets <- lapply(city_urls, process_city_data)
# Access processed data for each city
names(city_datasets) <- c("Amsterdam", "Tokyo", "London")
amsterdam_data <- city_datasets$Amsterdam
tokyo_data <- city_datasets$Tokyo
london_data <- city_datasets$London
# Add loop to save each city's data
for (city_name in names(city_datasets)) {
filename <- paste0(city_name, "_aggregated_df.csv")
output_path <- file.path(output_directory, filename)
write_csv(city_datasets[[city_name]]$combined, file = output_path)
}
#load libraries
library(readr)
library(data.table)
library(dplyr)
library(broom)
library(tidyverse)
#load the data
##Specify path to your CSV data
data_path <- "../data-preparation"
##Create an empty list to store datasets
city_datasets <- list()
##Read each CSV file
for (city in c("Amsterdam", "Tokyo", "London")) {
file_name <- paste0(city, "_aggregated_df.csv")
file_path <- paste0(data_path, "/", file_name)
# Read CSV into a data frame
city_data <- read_csv(file_path)
# Store in a list along with the city name
city_datasets[[city]] <- list(combined = city_data)
}
#load the data
##Specify path to your CSV data
data_path <- "../../output"
##Create an empty list to store datasets
city_datasets <- list()
##Read each CSV file
for (city in c("Amsterdam", "Tokyo", "London")) {
file_name <- paste0(city, "_aggregated_df.csv")
file_path <- paste0(data_path, "/", file_name)
# Read CSV into a data frame
city_data <- read_csv(file_path)
# Store in a list along with the city name
city_datasets[[city]] <- list(combined = city_data)
}
# Initialize an empty dataframe to store results
pricing_results <- data.frame()
# Loop through each city dataset
for (city_name in names(city_datasets)) {
# Get the city dataset
city_data <- city_datasets[[city_name]]$combined
# Summarize pricing by stay_length
pricing_summary <- city_data %>%
group_by(stay_type) %>%
summarize(mean_price = mean(price, na.rm = TRUE),
median_price = median(price, na.rm = TRUE),
min_price = min(price, na.rm = TRUE),
max_price = max(price, na.rm = TRUE))
# Add city name to the summary
pricing_summary$city <- city_name
# Append the summary to the results dataframe
pricing_results <- bind_rows(pricing_results, pricing_summary)
}
# Print the combined results
print(pricing_results)
# Perform Linear Regression for each city
lr_results <- list()
# Loop through each city dataset
for (city_name in names(city_datasets)) {
# Get the city dataset
city_data <- city_datasets[[city_name]]$combined
# Perform Linear Regression with price as IV and stay_type as DV with moderators room_type and review_scores_rating
lr_result <- lm(price ~ stay_type_dummy * room_type * review_scores_rating, data = city_data)
# Store Linear Regression results in the list
lr_results[[city_name]] <- tidy(lr_result)
}
# Print Linear Regression results for each city
for (city_name in names(lr_results)) {
cat("City:", city_name, "\n")
print(lr_results[[city_name]])
cat("\n")
}
# Specify output directory
output_directory <- "../../output"
# Save processed data
write_csv(pricing_results, file = file.path(output_directory, "pricing_results.csv"))
write_csv(lr_results$Amsterdam, file = file.path(output_directory, "Amsterdam_lr_results.csv"))
write_csv(lr_results$Tokyo, file = file.path(output_directory, "Tokyo_lr_results.csv"))
write_csv(lr_results$London, file = file.path(output_directory,  "London_lr_results.csv"))
library(knitr)
ams_results <- read_csv("../../output/Amsterdam_lr_results.csv")
kable(ams_results)
